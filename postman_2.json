{
	"info": {
		"_postman_id": "feeca38a-2b5d-43c4-a3f2-281337bfe2b6",
		"name": "group_25",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1/get_metod",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}get_method?name=Inna&age=30",
					"host": [
						"{{url}}get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"\"Проверить, что name в ответе равно name s request\"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Inna\");\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age s request \"\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"\"Проверить, что salary в ответе равно salary s request\"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"\"Спарсить request\"\r",
							"var req = request.data;\r",
							"\r",
							"\"Проверить, что name в ответе равно name s request (name забрать из request.)\"\r",
							"pm.test(\"Name is body\", function () {\r",
							"pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age s request (age забрать из request.)\"\r",
							"pm.test(\"Age is body\", function () {\r",
							"pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\"\r",
							"pm.test(\"Salary is body\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\"Вывести в консоль параметр family из response\"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"\"Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);\r",
							"});\r",
							"console.log(jsonData.family.u_salary_1_5_year);\r",
							"console.log(jsonData.salary*4);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_1?name=Inna&age=30&weight=57",
					"host": [
						"{{url}}object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "weight",
							"value": "57"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4/object_info_2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_2?name=Inna&age=30&salary=2000",
					"host": [
						"{{url}}object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_5/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\"Спарсить request\"\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"\"Проверить, что name в ответе равно name s request (name забрать из request.)\"\r",
							"pm.test(\"Name url\", function () {\r",
							"pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age s request (age забрать из request.)\"\r",
							"pm.test(\"Age url\", function () {\r",
							"pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\"\r",
							"pm.test(\"Salary url\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\"Вывести в консоль параметр family из response\"\r",
							"console.log(jsonData.family);\r",
							"\r",
							"\"Проверить, что у параметра dog есть параметры name\"\r",
							"pm.test(\"Dog is name\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\"Проверить, что у параметра dog есть параметры age\"\r",
							"pm.test(\"Dog is age\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр name имеет значение Luky\"\r",
							"pm.test(\"Name is Luky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр age имеет значение 4\"\r",
							"pm.test(\"Age is 4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Inna&age=30&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6//object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\"Спарсить request\"\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"\"Проверить, что name в ответе равно name s request (name забрать из request.)\"\r",
							"pm.test(\"Name url\", function () {\r",
							"pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\"Проверить, что age в ответе равно age из request (age забрать из request.)\"\r",
							"pm.test(\"Age url\", function () {\r",
							"pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"\"Вывести в консоль параметр salary из request\"\r",
							"console.log(req.salary);\r",
							"\r",
							"\"Вывести в консоль параметр salary из response\"\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"\"Вывести в консоль 0-й элемент параметра salary из response\"\r",
							"var salary_1 = jsonData.salary[0];\r",
							"console.log(salary_1);\r",
							"\r",
							"\"Вывести в консоль 1-й элемент параметра salary параметр salary из response\"\r",
							"var salary_2 = jsonData.salary[1];\r",
							"console.log(salary_2);\r",
							"\r",
							"\"Вывести в консоль 2-й элемент параметра salary параметр salary из response\"\r",
							"var salary_3 = jsonData.salary[2];\r",
							"console.log(salary_3);\r",
							"\r",
							"\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\"\r",
							"pm.test(\"Salary is 0\", function () {\r",
							"pm.expect(salary_1).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\"\r",
							"pm.test(\"Salary is 1\", function () {\r",
							"pm.expect(+salary_2).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\"\r",
							"pm.test(\"Salary is 2\", function () {\r",
							"pm.expect(+salary_3).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"\"Создать и передать в окружении переменную name\"\r",
							"pm.environment.set(jsonData.name);\r",
							"\r",
							"\"Создать и передать в окружении переменную age\"\r",
							"pm.environment.set(\"age\",jsonData.age);\r",
							"\r",
							"\"Передать в окружение переменную salary\"\r",
							"pm.environment.set(jsonData.salary);\r",
							"\r",
							"\"Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\"\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							"console.log(\"salary_cycle\", jsonData.salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Inna&age=30&salary=2000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Inna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\"Спарсить response body в json\"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\"Спарсить request\"\r",
							"var req = request.data;\r",
							"\r",
							"\"Вставить параметр salary из окружения в request\"\r",
							"var salary_body = +request.data.salary;\r",
							"console.log(salary_body);\r",
							"\r",
							"\"Вставить параметр age из окружения в age\"\r",
							"var age_body = request.data.age;\r",
							"console.log(age_body);\r",
							"\r",
							"\"Вставить параметр name из окружения в name\"\r",
							"var name_body = request.data.name;\r",
							"console.log(name_body);\r",
							"\r",
							"\"Проверить, что json response имеет параметр start_qa_salary\"\r",
							"pm.test(\"Json is start_qa_salary \", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_6_months\"\r",
							"pm.test(\"Json is qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_12_months\"\r",
							"pm.test(\"Json is qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\"\r",
							"pm.test(\"Json is qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\"\r",
							"pm.test(\"Json is qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"\"Проверить, что json response имеет параметр person\"\r",
							"pm.test(\"Json is person\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\"\r",
							"pm.test(\"start_qa_salary=salary\", function () {\r",
							"pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\"\r",
							"pm.test(\"qa_salary_after_6_months=salary*2\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\"\r",
							"pm.test(\"qa_salary_after_12_months=salary*2.7\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\"\r",
							"pm.test(\"qa_salary_after_1.5_year=salary*3.3\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);\r",
							"});\r",
							"\r",
							"\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\"\r",
							"pm.test(\"qa_salary_after_3.5_years=salary*3.8\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);\r",
							"});\r",
							"\r",
							"\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\"\r",
							"pm.test(\"first is u_name=salary\", function () {\r",
							"pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"console.log(\"name[1] =  \", jsonData.person.u_name[1])\r",
							"\r",
							"\"Проверить, что что параметр u_age равен age из request (age забрать из request.)\"\r",
							"pm.test(\"u_age=age\", function () {\r",
							"pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"console.log(\"u_age =   \", jsonData.person.u_age)\r",
							"\r",
							"\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\"\r",
							"pm.test(\"u_salary_5_years=salary*4.2\", function () {\r",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"console.log(\"u_salary_5_years =   \", jsonData.person.u_salary_5_years)\r",
							"\r",
							"\"***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\"\r",
							"for (let i in jsonData.person){\r",
							"    console.log(\"Property:\", i, \"property value:\", jsonData.person[i]);\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"token\", jsonData.token);\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.value).to.eql(100);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		}
	]
}